#import <Foundation/Foundation.h>
#import "SWGCorrelation.h"
#import "SWGJsonErrorResponse.h"
#import "SWGPostCorrelation.h"
#import "SWGCommonResponse.h"
#import "SWGObject.h"
#import "SWGApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface SWGCorrelationsApi: NSObject

@property(nonatomic, assign)SWGApiClient *apiClient;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(SWGCorrelationsApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(SWGCorrelationsApi*) sharedAPI;
///
///
/// Get correlations
/// Get correlations.<br>Supported filter parameters:<br><ul><li><b>correlationCoefficient</b> - Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action</li><li><b>onsetDelay</b> - The number of seconds which pass following a cause measurement before an effect would likely be observed.</li><li><b>durationOfAction</b> - The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.</li><li><b>lastUpdated</b> - The time that this measurement was last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul><br>
///
/// @param effect ORIGINAL variable name of the effect variable for which the user desires correlations
/// @param cause ORIGINAL variable name of the cause variable for which the user desires correlations
/// @param correlationCoefficient Pearson correlation coefficient between cause and effect after lagging by onset delay and grouping by duration of action
/// @param onsetDelay The number of seconds which pass following a cause measurement before an effect would likely be observed.
/// @param durationOfAction The time in seconds over which the cause would be expected to exert a measurable effect. We have selected a default value for each variable. This default value may be replaced by a user specified by adjusting their variable user settings.
/// @param lastUpdated The time that this measurement was last updated in the UTC format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
/// @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
/// @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
/// @param sort Sort by given field. If the field is prefixed with `-, it will sort in descending order.
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1CorrelationsGetWithCompletionBlock :(NSString*) effect 
     cause:(NSString*) cause 
     correlationCoefficient:(NSString*) correlationCoefficient 
     onsetDelay:(NSString*) onsetDelay 
     durationOfAction:(NSString*) durationOfAction 
     lastUpdated:(NSString*) lastUpdated 
     limit:(NSNumber*) limit 
     offset:(NSNumber*) offset 
     sort:(NSNumber*) sort 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Store or Update a Correlation
/// Add correlation
///
/// @param body Provides correlation data
/// 
///
/// @return 
-(NSNumber*) v1CorrelationsPostWithCompletionBlock :(SWGPostCorrelation*) body 
    
    
    completionHandler: (void (^)(NSError* error))completionBlock;


///
///
/// Search user correlations for a given cause
/// Returns average of all correlations and votes for all user cause variables for a given cause. If parameter \"include_public\" is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
///
/// @param organizationId Organization ID
/// @param userId User id
/// @param variableName Effect variable name
/// @param organizationToken Organization access token
/// @param includePublic Include bublic correlations, Can be \&quot;1\&quot; or empty.
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameCausesGetWithCompletionBlock :(NSNumber*) organizationId 
     userId:(NSNumber*) userId 
     variableName:(NSString*) variableName 
     organizationToken:(NSString*) organizationToken 
     includePublic:(NSString*) includePublic 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Search user correlations for a given cause
/// Returns average of all correlations and votes for all user cause variables for a given effect. If parameter \"include_public\" is used, it also returns public correlations. User correlation overwrites or supersedes public correlation.
///
/// @param organizationId Organization ID
/// @param userId User id
/// @param variableName Cause variable name
/// @param organizationToken Organization access token
/// @param includePublic Include bublic correlations, Can be \&quot;1\&quot; or empty.
/// 
///
/// @return NSArray<SWGCommonResponse>*
-(NSNumber*) v1OrganizationsOrganizationIdUsersUserIdVariablesVariableNameEffectsGetWithCompletionBlock :(NSNumber*) organizationId 
     userId:(NSNumber*) userId 
     variableName:(NSString*) variableName 
     organizationToken:(NSString*) organizationToken 
     includePublic:(NSString*) includePublic 
    
    completionHandler: (void (^)(NSArray<SWGCommonResponse>* output, NSError* error))completionBlock;
    


///
///
/// Get average correlations for variables containing search term
/// Returns the average correlations from all users for all public variables that contain the characters in the search query. Returns average of all users public variable correlations with a specified cause or effect.
///
/// @param search Name of the variable that you want to know the causes or effects of.
/// @param effectOrCause Specifies whether to return the effects or causes of the searched variable.
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1PublicCorrelationsSearchSearchGetWithCompletionBlock :(NSString*) search 
     effectOrCause:(NSString*) effectOrCause 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Search user correlations for a given effect
/// Returns average of all correlations and votes for all user cause variables for a given effect
///
/// @param variableName Effect variable name
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1VariablesVariableNameCausesGetWithCompletionBlock :(NSString*) variableName 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Search user correlations for a given cause
/// Returns average of all correlations and votes for all user effect variables for a given cause
///
/// @param variableName Cause variable name
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1VariablesVariableNameEffectsGetWithCompletionBlock :(NSString*) variableName 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Search public correlations for a given effect
/// Returns average of all correlations and votes for all public cause variables for a given effect
///
/// @param variableName Effect variable name
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1VariablesVariableNamePublicCausesGetWithCompletionBlock :(NSString*) variableName 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Search public correlations for a given cause
/// Returns average of all correlations and votes for all public cause variables for a given cause
///
/// @param variableName Cause variable name
/// 
///
/// @return NSArray<SWGCorrelation>*
-(NSNumber*) v1VariablesVariableNamePublicEffectsGetWithCompletionBlock :(NSString*) variableName 
    
    completionHandler: (void (^)(NSArray<SWGCorrelation>* output, NSError* error))completionBlock;
    


///
///
/// Post or update vote
/// This is to enable users to indicate their opinion on the plausibility of a causal relationship between a treatment and outcome. QuantiModo incorporates crowd-sourced plausibility estimations into their algorithm. This is done allowing user to indicate their view of the plausibility of each relationship with thumbs up/down buttons placed next to each prediction.
///
/// @param cause Cause variable name
/// @param effect Effect variable name
/// @param correlation Correlation value
/// @param vote Vote: 0 (for implausible) or 1 (for plausible)
/// 
///
/// @return SWGCommonResponse*
-(NSNumber*) v1VotesPostWithCompletionBlock :(NSString*) cause 
     effect:(NSString*) effect 
     correlation:(NSNumber*) correlation 
     vote:(NSNumber*) vote 
    
    completionHandler: (void (^)(SWGCommonResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete vote
/// Delete previously posted vote
///
/// @param cause Cause variable name
/// @param effect Effect variable name
/// 
///
/// @return SWGCommonResponse*
-(NSNumber*) v1VotesDeletePostWithCompletionBlock :(NSString*) cause 
     effect:(NSString*) effect 
    
    completionHandler: (void (^)(SWGCommonResponse* output, NSError* error))completionBlock;
    



@end
