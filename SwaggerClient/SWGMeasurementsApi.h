#import <Foundation/Foundation.h>
#import "SWGMeasurementSource.h"
#import "SWGMeasurement.h"
#import "SWGMeasurementSet.h"
#import "SWGCommonResponse.h"
#import "SWGMeasurementDelete.h"
#import "SWGMeasurementRange.h"
#import "SWGInlineResponse2003.h"
#import "SWGInlineResponse2004.h"
#import "SWGObject.h"
#import "SWGApiClient.h"


/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface SWGMeasurementsApi: NSObject

@property(nonatomic, assign)SWGApiClient *apiClient;

-(instancetype) initWithApiClient:(SWGApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(SWGMeasurementsApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;
+(SWGMeasurementsApi*) sharedAPI;
///
///
/// Get measurement sources
/// Returns a list of all the apps from which measurement data is obtained.
///
/// 
///
/// @return SWGMeasurementSource*
-(NSNumber*) v1MeasurementSourcesGetWithCompletionBlock :
    (void (^)(SWGMeasurementSource* output, NSError* error))completionBlock;
    


///
///
/// Add a data source
/// Add a life-tracking app or device to the QuantiModo list of data sources.
///
/// @param body An array of names of data sources you want to add.
/// @param accessToken User&#39;s OAuth2 access token
/// 
///
/// @return 
-(NSNumber*) v1MeasurementSourcesPostWithCompletionBlock :(SWGMeasurementSource*) body 
     accessToken:(NSString*) accessToken 
    
    
    completionHandler: (void (^)(NSError* error))completionBlock;


///
///
/// Get measurements for this user
/// Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. <br>Supported filter parameters:<br><ul><li><b>value</b> - Value of measurement</li><li><b>lastUpdated</b> - The time that this measurement was created or last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul><br>
///
/// @param accessToken User&#39;s OAuth2 access token
/// @param variableName Name of the variable you want measurements for
/// @param source Name of the source you want measurements for (supports exact name match only)
/// @param value Value of measurement
/// @param lastUpdated The time that this measurement was created or last updated in the format \&quot;YYYY-MM-DDThh:mm:ss\&quot;
/// @param unit The unit you want the measurements returned in
/// @param startTime The lower limit of measurements returned (Epoch)
/// @param createdAt The time the measurement record was first created in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
/// @param updatedAt The time the measurement record was last changed in the format YYYY-MM-DDThh:mm:ss. Time zone should be UTC and not local.
/// @param endTime The upper limit of measurements returned (Epoch)
/// @param groupingWidth The time (in seconds) over which measurements are grouped together
/// @param groupingTimezone The time (in seconds) over which measurements are grouped together
/// @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
/// @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
/// @param sort Sort by given field. If the field is prefixed with `-, it will sort in descending order.
/// 
///
/// @return SWGMeasurement*
-(NSNumber*) v1MeasurementsGetWithCompletionBlock :(NSString*) accessToken 
     variableName:(NSString*) variableName 
     source:(NSString*) source 
     value:(NSString*) value 
     lastUpdated:(NSString*) lastUpdated 
     unit:(NSString*) unit 
     startTime:(NSString*) startTime 
     createdAt:(NSString*) createdAt 
     updatedAt:(NSString*) updatedAt 
     endTime:(NSString*) endTime 
     groupingWidth:(NSNumber*) groupingWidth 
     groupingTimezone:(NSString*) groupingTimezone 
     limit:(NSNumber*) limit 
     offset:(NSNumber*) offset 
     sort:(NSNumber*) sort 
    
    completionHandler: (void (^)(SWGMeasurement* output, NSError* error))completionBlock;
    


///
///
/// Post a new set or update existing measurements to the database
/// You can submit or update multiple measurements in a \"measurements\" sub-array.  If the variable these measurements correspond to does not already exist in the database, it will be automatically added.  The request body should look something like [{\"measurements\":[{\"startTime\":1439389320,\"value\":\"3\"}, {\"startTime\":1439389319,\"value\":\"2\"}],\"name\":\"Acne (out of 5)\",\"source\":\"QuantiModo\",\"category\":\"Symptoms\",\"combinationOperation\":\"MEAN\",\"unit\":\"/5\"}]
///
/// @param body An array of measurements you want to insert.
/// @param accessToken User&#39;s OAuth2 access token
/// 
///
/// @return 
-(NSNumber*) v1MeasurementsPostWithCompletionBlock :(SWGMeasurementSet*) body 
     accessToken:(NSString*) accessToken 
    
    
    completionHandler: (void (^)(NSError* error))completionBlock;


///
///
/// Get daily measurements for this user
/// Measurements are any value that can be recorded like daily steps, a mood rating, or apples eaten. <br>Supported filter parameters:<br><ul><li><b>value</b> - Value of measurement</li><li><b>lastUpdated</b> - The time that this measurement was created or last updated in the UTC format \"YYYY-MM-DDThh:mm:ss\"</li></ul><br>
///
/// @param variableName Name of the variable you want measurements for
/// @param accessToken User&#39;s OAuth2 access token
/// @param abbreviatedUnitName The unit your want the measurements in
/// @param startTime The lower limit of measurements returned (Iso8601)
/// @param endTime The upper limit of measurements returned (Iso8601)
/// @param groupingWidth The time (in seconds) over which measurements are grouped together
/// @param groupingTimezone The time (in seconds) over which measurements are grouped together
/// @param limit The LIMIT is used to limit the number of results returned. So if you have 1000 results, but only want to the first 10, you would set this to 10 and offset to 0.
/// @param offset Now suppose you wanted to show results 11-20. You&#39;d set the offset to 10 and the limit to 10.
/// @param sort Sort by given field. If the field is prefixed with `-, it will sort in descending order.
/// 
///
/// @return SWGMeasurement*
-(NSNumber*) v1MeasurementsDailyGetWithCompletionBlock :(NSString*) variableName 
     accessToken:(NSString*) accessToken 
     abbreviatedUnitName:(NSString*) abbreviatedUnitName 
     startTime:(NSString*) startTime 
     endTime:(NSString*) endTime 
     groupingWidth:(NSNumber*) groupingWidth 
     groupingTimezone:(NSString*) groupingTimezone 
     limit:(NSNumber*) limit 
     offset:(NSNumber*) offset 
     sort:(NSNumber*) sort 
    
    completionHandler: (void (^)(SWGMeasurement* output, NSError* error))completionBlock;
    


///
///
/// Delete a measurement
/// Delete a previously submitted measurement
///
/// @param body The startTime and variableId of the measurement to be deleted.
/// 
///
/// @return SWGCommonResponse*
-(NSNumber*) v1MeasurementsDeletePostWithCompletionBlock :(SWGMeasurementDelete*) body 
    
    completionHandler: (void (^)(SWGCommonResponse* output, NSError* error))completionBlock;
    


///
///
/// Get measurements range for this user
/// Get Unix time-stamp (epoch time) of the user's first and last measurements taken.
///
/// @param sources Enter source name to limit to specific source (varchar)
/// @param user If not specified, uses currently logged in user (bigint)
/// 
///
/// @return SWGMeasurementRange*
-(NSNumber*) v1MeasurementsRangeGetWithCompletionBlock :(NSString*) sources 
     user:(NSNumber*) user 
    
    completionHandler: (void (^)(SWGMeasurementRange* output, NSError* error))completionBlock;
    


///
///
/// Get Measurement
/// Get Measurement
///
/// @param _id id of Measurement
/// @param accessToken User&#39;s OAuth2 access token
/// 
///
/// @return SWGInlineResponse2003*
-(NSNumber*) v2MeasurementsIdGetWithCompletionBlock :(NSNumber*) _id 
     accessToken:(NSString*) accessToken 
    
    completionHandler: (void (^)(SWGInlineResponse2003* output, NSError* error))completionBlock;
    


///
///
/// Update Measurement
/// Update Measurement
///
/// @param _id id of Measurement
/// @param accessToken User&#39;s OAuth2 access token
/// @param body Measurement that should be updated
/// 
///
/// @return SWGInlineResponse2004*
-(NSNumber*) v2MeasurementsIdPutWithCompletionBlock :(NSNumber*) _id 
     accessToken:(NSString*) accessToken 
     body:(SWGMeasurement*) body 
    
    completionHandler: (void (^)(SWGInlineResponse2004* output, NSError* error))completionBlock;
    


///
///
/// Delete Measurement
/// Delete Measurement
///
/// @param _id id of Measurement
/// @param accessToken User&#39;s OAuth2 access token
/// 
///
/// @return SWGInlineResponse2004*
-(NSNumber*) v2MeasurementsIdDeleteWithCompletionBlock :(NSNumber*) _id 
     accessToken:(NSString*) accessToken 
    
    completionHandler: (void (^)(SWGInlineResponse2004* output, NSError* error))completionBlock;
    



@end
