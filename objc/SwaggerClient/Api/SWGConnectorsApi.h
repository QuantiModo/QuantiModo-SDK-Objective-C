#import <Foundation/Foundation.h>
#import "SWGConnector.h"
#import "SWGConnectorInfo.h"
#import "SWGConnectorInstruction.h"
#import "SWGApi.h"

/**
* QuantiModo
* QuantiModo makes it easy to retrieve normalized user data from a wide array of devices and applications. [Learn about QuantiModo](https://quantimo.do), check out our [docs](https://github.com/QuantiModo/docs) or contact us at [help.quantimo.do](https://help.quantimo.do). 
*
* OpenAPI spec version: 2.0
* 
*
* NOTE: This class is auto generated by the swagger code generator program.
* https://github.com/swagger-api/swagger-codegen.git
* Do not edit the class manually.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/


@interface SWGConnectorsApi: NSObject <SWGApi>

extern NSString* kSWGConnectorsApiErrorDomain;
extern NSInteger kSWGConnectorsApiMissingParamErrorCode;

+(instancetype) sharedAPI;

/// Mobile connect page
/// This page is designed to be opened in a webview.  Instead of using popup authentication boxes, it uses redirection. You can include the user's access_token as a URL parameter like https://app.quantimo.do/api/v1/connect/mobile?access_token=123
///
/// @param accessToken User OAuth access token
/// @param userId User&#39;s id (optional)
/// 
///  code:200 message:"Mobile connect page was returned",
///  code:401 message:"User token is missing",
///  code:403 message:"User token is incorrect"
///
/// @return 
-(NSNumber*) v1ConnectMobileGetWithAccessToken: (NSString*) accessToken
    userId: (NSNumber*) userId
    completionHandler: (void (^)(NSError* error)) handler;


/// Obtain a token from 3rd party data source
/// Attempt to obtain a token from the data provider, store it in the database. With this, the connector to continue to obtain new user data until the token is revoked.
///
/// @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
/// @param accessToken User&#39;s OAuth2 access token (optional)
/// @param userId User&#39;s id (optional)
/// 
///  code:200 message:"Successful operation",
///  code:401 message:"Not Authenticated",
///  code:404 message:"Method not found. Could not execute the requested method.",
///  code:500 message:"Error during update. Unsupported response from update()."
///
/// @return 
-(NSNumber*) v1ConnectorsConnectorNameConnectGetWithConnectorName: (NSString*) connectorName
    accessToken: (NSString*) accessToken
    userId: (NSNumber*) userId
    completionHandler: (void (^)(NSError* error)) handler;


/// Connection Instructions
/// Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
///
/// @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
/// @param parameters JSON Array of Parameters for the request to enable connector.
/// @param url URL which should be used to enable the connector.
/// @param usePopup Should use popup when enabling connector
/// @param accessToken User&#39;s OAuth2 access token (optional)
/// @param userId User&#39;s id (optional)
/// 
///  code:200 message:"Successful operation",
///  code:401 message:"Not Authenticated",
///  code:404 message:"Method not found. Could not execute the requested method.",
///  code:500 message:"Error during update. Unsupported response from update()."
///
/// @return 
-(NSNumber*) v1ConnectorsConnectorNameConnectInstructionsGetWithConnectorName: (NSString*) connectorName
    parameters: (NSString*) parameters
    url: (NSString*) url
    usePopup: (NSNumber*) usePopup
    accessToken: (NSString*) accessToken
    userId: (NSNumber*) userId
    completionHandler: (void (^)(NSError* error)) handler;


/// Connect Parameter
/// Returns instructions that describe what parameters and endpoint to use to connect to the given data provider.
///
/// @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
/// @param displayName Name of the parameter that is user visible in the form
/// @param key Name of the property that the user has to enter such as username or password Connector (used in HTTP request)
/// @param placeholder Placeholder hint value for the parameter input tag.
/// @param type Type of input field such as those found here http://www.w3schools.com/tags/tag_input.asp
/// @param usePopup Should use popup when enabling connector
/// @param accessToken User&#39;s OAuth2 access token (optional)
/// @param userId User&#39;s id (optional)
/// @param defaultValue Default parameter value (optional)
/// 
///  code:200 message:"Successful operation",
///  code:401 message:"Not Authenticated",
///  code:404 message:"Method not found. Could not execute the requested method.",
///  code:500 message:"Error during update. Unsupported response from update()."
///
/// @return SWGConnectorInstruction*
-(NSNumber*) v1ConnectorsConnectorNameConnectParameterGetWithConnectorName: (NSString*) connectorName
    displayName: (NSString*) displayName
    key: (NSString*) key
    placeholder: (NSString*) placeholder
    type: (NSString*) type
    usePopup: (NSNumber*) usePopup
    accessToken: (NSString*) accessToken
    userId: (NSNumber*) userId
    defaultValue: (NSString*) defaultValue
    completionHandler: (void (^)(SWGConnectorInstruction* output, NSError* error)) handler;


/// Delete stored connection info
/// The disconnect method deletes any stored tokens or connection information from the connectors database.
///
/// @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
/// 
///  code:200 message:"Successful operation",
///  code:401 message:"Not Authenticated",
///  code:404 message:"Method not found. Could not execute the requested method.",
///  code:500 message:"Error during update. Unsupported response from update()."
///
/// @return 
-(NSNumber*) v1ConnectorsConnectorNameDisconnectGetWithConnectorName: (NSString*) connectorName
    completionHandler: (void (^)(NSError* error)) handler;


/// Get connector info for user
/// Returns information about the connector such as the connector id, whether or not is connected for this user (i.e. we have a token or credentials), and its update history for the user.
///
/// @param connectorName Lowercase system name of the source application or device. Get a list of available connectors from the /v1/connectors/list endpoint.
/// @param accessToken User&#39;s OAuth2 access token (optional)
/// @param userId User&#39;s id (optional)
/// 
///  code:200 message:"Successful operation",
///  code:401 message:"Not Authenticated",
///  code:404 message:"Method not found. Could not execute the requested method.",
///  code:500 message:"Error during update. Please contact info@quantimo.do."
///
/// @return SWGConnectorInfo*
-(NSNumber*) v1ConnectorsConnectorNameInfoGetWithConnectorName: (NSString*) connectorName
    accessToken: (NSString*) accessToken
    userId: (NSNumber*) userId
    completionHandler: (void (^)(SWGConnectorInfo* output, NSError* error)) handler;


/// Sync with data source
/// The update method tells the QM Connector Framework to check with the data provider (such as Fitbit or MyFitnessPal) and retrieve any new measurements available.
///
/// @param connectorName Lowercase system name of the source application or device
/// @param accessToken User&#39;s OAuth2 access token (optional)
/// @param userId User&#39;s id (optional)
/// 
///  code:200 message:"Connection Successful",
///  code:401 message:"Not Authenticated",
///  code:404 message:"Method not found. Could not execute the requested method.",
///  code:500 message:"Error during update. Unsupported response from update()."
///
/// @return 
-(NSNumber*) v1ConnectorsConnectorNameUpdateGetWithConnectorName: (NSString*) connectorName
    accessToken: (NSString*) accessToken
    userId: (NSNumber*) userId
    completionHandler: (void (^)(NSError* error)) handler;


/// List of Connectors
/// A connector pulls data from other data providers using their API or a screenscraper. Returns a list of all available connectors and information about them such as their id, name, whether the user has provided access, logo url, connection instructions, and the update history.
///
/// 
///  code:200 message:"Successful Operation",
///  code:401 message:"Not Authenticated"
///
/// @return NSArray<SWGConnector>*
-(NSNumber*) v1ConnectorsListGetWithCompletionHandler: 
    (void (^)(NSArray<SWGConnector>* output, NSError* error)) handler;


/// Get embeddable connect javascript
/// Get embeddable connect javascript. Usage:   - Embedding in applications with popups for 3rd-party authentication windows.     Use `qmSetupInPopup` function after connecting `connect.js`.   - Embedding in applications with popups for 3rd-party authentication windows.     Requires a selector to block. It will be embedded in this block.     Use `qmSetupOnPage` function after connecting `connect.js`.   - Embedding in mobile applications without popups for 3rd-party authentication.     Use `qmSetupOnMobile` function after connecting `connect.js`.     If using in a Cordova application call  `qmSetupOnIonic` function after connecting `connect.js`.
///
/// @param accessToken User&#39;s OAuth2 access token (optional)
/// 
///  code:200 message:"Embeddable connect javascript was returned"
///
/// @return 
-(NSNumber*) v1IntegrationJsGetWithAccessToken: (NSString*) accessToken
    completionHandler: (void (^)(NSError* error)) handler;



@end
